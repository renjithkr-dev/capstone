service: capstone
frameworkVersion: '2'
plugins:
  - serverless-iam-roles-per-function
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'} 
  environment:
    APPTS_TABLE: appts-${self:provider.stage}
    STAFF_APPTS_INDEX: appts-staff-${self:provider.stage}
    USER_APPTS_INDEX: appts-user-${self:provider.stage}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createAppointment:
    handler: dist/src/lambda/createAppointment.handler
    iamRoleStatements:
      - Effect: 'Allow'
        Action: 
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPTS_TABLE}
    events:
      - http:
          path: appointments/user/create
          method: post
          cors: 
            headers: "*"
        request:
          schema:
            application/json: ${file(src/models/CreateAppointment.json)}
  deleteAppointment:
    handler: dist/src/lambda/deleteAppointment.handler
    iamRoleStatements:
      - Effect: 'Allow'
        Action: 
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPTS_TABLE}
    events:
      - http:
          path: appointments/delete/{appointmentId}
          method: delete
          cors: 
            headers: "*"
  updateAppointmentStatus:
    handler: dist/src/lambda/updateAppointmentStatus.handler
    iamRoleStatements:
      - Effect: 'Allow'
        Action: 
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPTS_TABLE}
    events:
      - http:
          path: appointments/update
          method: patch
          cors: 
            headers: "*"
  getUserAppointments:
    handler: dist/src/lambda/getUserAppointments.handler
    iamRoleStatements:
      - Effect: 'Allow'
        Action: 
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPTS_TABLE}/index/${self:provider.environment.USER_APPTS_INDEX}
    events:
      - http:
          path: appointments/user/
          method: get
          cors: 
            headers: "*"
      - http:
          path: appointments/user/{apptDate}
          method: get
          cors: 
            headers: "*"
  getStaffAppointments:
    handler: dist/src/lambda/getStaffAppointments.handler
    iamRoleStatements:
      - Effect: 'Allow'
        Action: 
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPTS_TABLE}/index/${self:provider.environment.STAFF_APPTS_INDEX}
    events:
      - http:
          path: appointments/staff/
          method: get
          cors: 
            headers: "*"
      - http:
          path: appointments/staff/{apptDate}
          method: get
          cors: 
            headers: "*"
resources:
  Resources:
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: appointmentId
            AttributeType: S
          - AttributeName: staffId
            AttributeType: S
          - AttributeName: appointmentDate
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: appointmentId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.APPTS_TABLE}
        GlobalSecondaryIndexes: 
          - IndexName: ${self:provider.environment.STAFF_APPTS_INDEX}
            KeySchema:
              - AttributeName: staffId
                KeyType: HASH
              - AttributeName: appointmentDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_APPTS_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: appointmentDate
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
